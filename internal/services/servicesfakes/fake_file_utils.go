// Code generated by counterfeiter. DO NOT EDIT.
package servicesfakes

import (
	"sync"

	"github.com/dembygenesis/local.tools/internal/models"
)

type FakeFileUtils struct {
	CopyDirStub        func(*models.CopyOptions) error
	copyDirMutex       sync.RWMutex
	copyDirArgsForCall []struct {
		arg1 *models.CopyOptions
	}
	copyDirReturns struct {
		result1 error
	}
	copyDirReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFileUtils) CopyDir(arg1 *models.CopyOptions) error {
	fake.copyDirMutex.Lock()
	ret, specificReturn := fake.copyDirReturnsOnCall[len(fake.copyDirArgsForCall)]
	fake.copyDirArgsForCall = append(fake.copyDirArgsForCall, struct {
		arg1 *models.CopyOptions
	}{arg1})
	stub := fake.CopyDirStub
	fakeReturns := fake.copyDirReturns
	fake.recordInvocation("CopyDir", []interface{}{arg1})
	fake.copyDirMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeFileUtils) CopyDirCallCount() int {
	fake.copyDirMutex.RLock()
	defer fake.copyDirMutex.RUnlock()
	return len(fake.copyDirArgsForCall)
}

func (fake *FakeFileUtils) CopyDirCalls(stub func(*models.CopyOptions) error) {
	fake.copyDirMutex.Lock()
	defer fake.copyDirMutex.Unlock()
	fake.CopyDirStub = stub
}

func (fake *FakeFileUtils) CopyDirArgsForCall(i int) *models.CopyOptions {
	fake.copyDirMutex.RLock()
	defer fake.copyDirMutex.RUnlock()
	argsForCall := fake.copyDirArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeFileUtils) CopyDirReturns(result1 error) {
	fake.copyDirMutex.Lock()
	defer fake.copyDirMutex.Unlock()
	fake.CopyDirStub = nil
	fake.copyDirReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeFileUtils) CopyDirReturnsOnCall(i int, result1 error) {
	fake.copyDirMutex.Lock()
	defer fake.copyDirMutex.Unlock()
	fake.CopyDirStub = nil
	if fake.copyDirReturnsOnCall == nil {
		fake.copyDirReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.copyDirReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeFileUtils) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.copyDirMutex.RLock()
	defer fake.copyDirMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeFileUtils) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
