// Code generated by counterfeiter. DO NOT EDIT.
package persistencefakes

import (
	"context"
	"sync"

	"github.com/dembygenesis/local.tools/internal/persistence"
)

type FakeTransactionProvider struct {
	DbStub        func(context.Context) (persistence.TransactionHandler, error)
	dbMutex       sync.RWMutex
	dbArgsForCall []struct {
		arg1 context.Context
	}
	dbReturns struct {
		result1 persistence.TransactionHandler
		result2 error
	}
	dbReturnsOnCall map[int]struct {
		result1 persistence.TransactionHandler
		result2 error
	}
	TxStub        func(context.Context) (persistence.TransactionHandler, error)
	txMutex       sync.RWMutex
	txArgsForCall []struct {
		arg1 context.Context
	}
	txReturns struct {
		result1 persistence.TransactionHandler
		result2 error
	}
	txReturnsOnCall map[int]struct {
		result1 persistence.TransactionHandler
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTransactionProvider) Db(arg1 context.Context) (persistence.TransactionHandler, error) {
	fake.dbMutex.Lock()
	ret, specificReturn := fake.dbReturnsOnCall[len(fake.dbArgsForCall)]
	fake.dbArgsForCall = append(fake.dbArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.DbStub
	fakeReturns := fake.dbReturns
	fake.recordInvocation("Db", []interface{}{arg1})
	fake.dbMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeTransactionProvider) DbCallCount() int {
	fake.dbMutex.RLock()
	defer fake.dbMutex.RUnlock()
	return len(fake.dbArgsForCall)
}

func (fake *FakeTransactionProvider) DbCalls(stub func(context.Context) (persistence.TransactionHandler, error)) {
	fake.dbMutex.Lock()
	defer fake.dbMutex.Unlock()
	fake.DbStub = stub
}

func (fake *FakeTransactionProvider) DbArgsForCall(i int) context.Context {
	fake.dbMutex.RLock()
	defer fake.dbMutex.RUnlock()
	argsForCall := fake.dbArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTransactionProvider) DbReturns(result1 persistence.TransactionHandler, result2 error) {
	fake.dbMutex.Lock()
	defer fake.dbMutex.Unlock()
	fake.DbStub = nil
	fake.dbReturns = struct {
		result1 persistence.TransactionHandler
		result2 error
	}{result1, result2}
}

func (fake *FakeTransactionProvider) DbReturnsOnCall(i int, result1 persistence.TransactionHandler, result2 error) {
	fake.dbMutex.Lock()
	defer fake.dbMutex.Unlock()
	fake.DbStub = nil
	if fake.dbReturnsOnCall == nil {
		fake.dbReturnsOnCall = make(map[int]struct {
			result1 persistence.TransactionHandler
			result2 error
		})
	}
	fake.dbReturnsOnCall[i] = struct {
		result1 persistence.TransactionHandler
		result2 error
	}{result1, result2}
}

func (fake *FakeTransactionProvider) Tx(arg1 context.Context) (persistence.TransactionHandler, error) {
	fake.txMutex.Lock()
	ret, specificReturn := fake.txReturnsOnCall[len(fake.txArgsForCall)]
	fake.txArgsForCall = append(fake.txArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.TxStub
	fakeReturns := fake.txReturns
	fake.recordInvocation("Tx", []interface{}{arg1})
	fake.txMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeTransactionProvider) TxCallCount() int {
	fake.txMutex.RLock()
	defer fake.txMutex.RUnlock()
	return len(fake.txArgsForCall)
}

func (fake *FakeTransactionProvider) TxCalls(stub func(context.Context) (persistence.TransactionHandler, error)) {
	fake.txMutex.Lock()
	defer fake.txMutex.Unlock()
	fake.TxStub = stub
}

func (fake *FakeTransactionProvider) TxArgsForCall(i int) context.Context {
	fake.txMutex.RLock()
	defer fake.txMutex.RUnlock()
	argsForCall := fake.txArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTransactionProvider) TxReturns(result1 persistence.TransactionHandler, result2 error) {
	fake.txMutex.Lock()
	defer fake.txMutex.Unlock()
	fake.TxStub = nil
	fake.txReturns = struct {
		result1 persistence.TransactionHandler
		result2 error
	}{result1, result2}
}

func (fake *FakeTransactionProvider) TxReturnsOnCall(i int, result1 persistence.TransactionHandler, result2 error) {
	fake.txMutex.Lock()
	defer fake.txMutex.Unlock()
	fake.TxStub = nil
	if fake.txReturnsOnCall == nil {
		fake.txReturnsOnCall = make(map[int]struct {
			result1 persistence.TransactionHandler
			result2 error
		})
	}
	fake.txReturnsOnCall[i] = struct {
		result1 persistence.TransactionHandler
		result2 error
	}{result1, result2}
}

func (fake *FakeTransactionProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.dbMutex.RLock()
	defer fake.dbMutex.RUnlock()
	fake.txMutex.RLock()
	defer fake.txMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTransactionProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ persistence.TransactionProvider = new(FakeTransactionProvider)
