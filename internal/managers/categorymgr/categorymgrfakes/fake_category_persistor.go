// Code generated by counterfeiter. DO NOT EDIT.
package categorymgrfakes

import (
	"context"
	"sync"

	"github.com/dembygenesis/local.tools/internal/model"
	"github.com/dembygenesis/local.tools/internal/persistence"
)

type FakeCategoryPersistor struct {
	GetCategoriesStub        func(context.Context, persistence.TransactionHandler, *model.CategoryFilters) (*model.PaginatedCategories, error)
	getCategoriesMutex       sync.RWMutex
	getCategoriesArgsForCall []struct {
		arg1 context.Context
		arg2 persistence.TransactionHandler
		arg3 *model.CategoryFilters
	}
	getCategoriesReturns struct {
		result1 *model.PaginatedCategories
		result2 error
	}
	getCategoriesReturnsOnCall map[int]struct {
		result1 *model.PaginatedCategories
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCategoryPersistor) GetCategories(arg1 context.Context, arg2 persistence.TransactionHandler, arg3 *model.CategoryFilters) (*model.PaginatedCategories, error) {
	fake.getCategoriesMutex.Lock()
	ret, specificReturn := fake.getCategoriesReturnsOnCall[len(fake.getCategoriesArgsForCall)]
	fake.getCategoriesArgsForCall = append(fake.getCategoriesArgsForCall, struct {
		arg1 context.Context
		arg2 persistence.TransactionHandler
		arg3 *model.CategoryFilters
	}{arg1, arg2, arg3})
	stub := fake.GetCategoriesStub
	fakeReturns := fake.getCategoriesReturns
	fake.recordInvocation("GetCategories", []interface{}{arg1, arg2, arg3})
	fake.getCategoriesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCategoryPersistor) GetCategoriesCallCount() int {
	fake.getCategoriesMutex.RLock()
	defer fake.getCategoriesMutex.RUnlock()
	return len(fake.getCategoriesArgsForCall)
}

func (fake *FakeCategoryPersistor) GetCategoriesCalls(stub func(context.Context, persistence.TransactionHandler, *model.CategoryFilters) (*model.PaginatedCategories, error)) {
	fake.getCategoriesMutex.Lock()
	defer fake.getCategoriesMutex.Unlock()
	fake.GetCategoriesStub = stub
}

func (fake *FakeCategoryPersistor) GetCategoriesArgsForCall(i int) (context.Context, persistence.TransactionHandler, *model.CategoryFilters) {
	fake.getCategoriesMutex.RLock()
	defer fake.getCategoriesMutex.RUnlock()
	argsForCall := fake.getCategoriesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCategoryPersistor) GetCategoriesReturns(result1 *model.PaginatedCategories, result2 error) {
	fake.getCategoriesMutex.Lock()
	defer fake.getCategoriesMutex.Unlock()
	fake.GetCategoriesStub = nil
	fake.getCategoriesReturns = struct {
		result1 *model.PaginatedCategories
		result2 error
	}{result1, result2}
}

func (fake *FakeCategoryPersistor) GetCategoriesReturnsOnCall(i int, result1 *model.PaginatedCategories, result2 error) {
	fake.getCategoriesMutex.Lock()
	defer fake.getCategoriesMutex.Unlock()
	fake.GetCategoriesStub = nil
	if fake.getCategoriesReturnsOnCall == nil {
		fake.getCategoriesReturnsOnCall = make(map[int]struct {
			result1 *model.PaginatedCategories
			result2 error
		})
	}
	fake.getCategoriesReturnsOnCall[i] = struct {
		result1 *model.PaginatedCategories
		result2 error
	}{result1, result2}
}

func (fake *FakeCategoryPersistor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getCategoriesMutex.RLock()
	defer fake.getCategoriesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCategoryPersistor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
